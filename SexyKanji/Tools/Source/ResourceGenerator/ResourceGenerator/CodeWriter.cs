/// ********************************************************************
/// Sexy Kanji Resource Generator Version 0.1
/// -------------------------------------------------------------    
/// Created:    2010/03/16
/// Filename:   CodeWriter.cs
///
/// Purpose:    Write the resource information to C++ header/source files.
///             
///             Heiko Fischer - heiko@fischeronline.de
/// *********************************************************************

using System;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace ResourceGenerator
{
    /// <summary>
    /// Class to write the resource information to C++ header/source files.
    /// </summary>
    class CodeWriter : ResourceData
    {
        /************************************************************************/
        /* The form to write console output information.
        /************************************************************************/
        ResourceGeneratorForm mOutputForm = null;
        
        /************************************************************************/
        /* String to store error information.
        /************************************************************************/
        String          mErrorString;

        /************************************************************************/
        /* Write the C++ source files.
        /************************************************************************/
        StreamWriter    aStreamWriter;

        /************************************************************************/
        /* A specified function prefix.
        /************************************************************************/
        String          mFunctionPrefix;

        /// <summary>
        /// CTor, initialize member.
        /// </summary>
        /// <param name="theOutputForm">The form to write console output.</param>
        public CodeWriter(ResourceGeneratorForm theOutputForm)
        {
            mOutputForm     = theOutputForm;
            mErrorString    = "";
            mFunctionPrefix = "";
        }

        /// <summary>
        /// Get the current error.
        /// </summary>
        /// <returns>The error as string.</returns>
        public String GetError()
        {
            return mErrorString;
        }

        /// <summary>
        /// Write a comment header to the C++ source file.
        /// </summary>
        /// <param name="theName">Name of the source file.</param>
        /// <param name="theExtension">Extension of the source file.</param>
        private void WriteCommentHeader(String theName, String theExtension)
        {
            aStreamWriter.WriteLine("/********************************************************************");
            aStreamWriter.WriteLine("\tGenerated by Sexy Kanji Resource Generator (JPoag/HFischer)");
            aStreamWriter.WriteLine("\t-----------------------------------------------------------");
            aStreamWriter.WriteLine("\tCreated:\t" + DateTime.Now);
            aStreamWriter.WriteLine("\tFilename:\t" + theName + theExtension + Environment.NewLine);
            aStreamWriter.WriteLine("\tPurpose:\tFunctions and globals, based on the resource.xml file,"); 
            aStreamWriter.WriteLine("\t\t\t\tto easily use the resources in your program.");
            aStreamWriter.WriteLine("*********************************************************************/" + Environment.NewLine);
        }

        /// <summary>
        /// Get the type name of the resource.
        /// </summary>
        /// <param name="theRes">The resource information.</param>
        /// <returns>The type name as string.</returns>
        private String GetTypeName(BaseRes theRes)
        {
            switch(theRes.mType)
            {
                case ResType.Image: return "SexyImage*"; 
                case ResType.Sound: return "int";
                case ResType.Music: return "int"; 
                case ResType.Font:  return "SexyFont*";
                case ResType.Movie: return "SexyMovie*"; 
            }

            return "";
        }

        /// <summary>
        /// Write header for a resource group.
        /// </summary>
        /// <param name="theResGroup">Name of the resource group.</param>
        /// <param name="theResourceDict">Dictionary with the resources for this group.</param>
        private void WriteHeaderFileGroup(String theResGroup, SortedDictionary<String, BaseRes> theResourceDict)
        {
            // extract function
            aStreamWriter.WriteLine("\t// " + theResGroup + " Resources" + Environment.NewLine);
            aStreamWriter.WriteLine("\tbool " + mFunctionPrefix + "Extract" + theResGroup + "Resources(ResourceManager* theMgr);" + Environment.NewLine);

            // get extern references
            Set<String> aExternRefSet = new Set<String>();

            foreach (KeyValuePair<String, BaseRes> aBaseRes in theResourceDict)
            {
                BaseRes aRes        = aBaseRes.Value;
                String  aVarName    = aRes.mId;
                String  aTypeName   = GetTypeName(aRes);

                aExternRefSet.Add("\textern " + aTypeName + " " + aVarName + ";" + Environment.NewLine);
            }

            // write extern references
            foreach (KeyValuePair<String, bool> aExternRef in aExternRefSet)
            {
                aStreamWriter.Write(aExternRef.Key);
            }

            aStreamWriter.WriteLine("");
        }

        /// <summary>
        /// Write the C++ header file.
        /// </summary>
        /// <param name="theName">Name of the header file without extension.</param>
        private void WriteHeaderFile(String theName)
        {
            WriteCommentHeader(theName, ".h");

            aStreamWriter.WriteLine("#ifndef __" + theName.ToUpper() + "_H__");
            aStreamWriter.WriteLine("#define __" + theName.ToUpper() + "_H__" + Environment.NewLine);
            aStreamWriter.WriteLine("#include \"Common.h\"" + Environment.NewLine);
            aStreamWriter.WriteLine("namespace Sexy");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\t// forward declarations");
            aStreamWriter.WriteLine("\tclass ResourceManager;");
            aStreamWriter.WriteLine("\tclass SexyImage;");
            aStreamWriter.WriteLine("\tclass SexyFont;");
            aStreamWriter.WriteLine("\tclass SexyMovie;" + Environment.NewLine);

            aStreamWriter.WriteLine("\tSexyImage* " + mFunctionPrefix + "LoadImageById(ResourceManager* theManager, int theId);");
            aStreamWriter.WriteLine("\tvoid " + mFunctionPrefix + "ReplaceImageById(ResourceManager* theManager, int theId, SexyImage* theImage);");

            aStreamWriter.WriteLine("\tbool " + mFunctionPrefix + "ExtractResourcesByName(ResourceManager* theManager, SexyString theName);" + Environment.NewLine);

            // write header for each resource group
            foreach (KeyValuePair<String, SortedDictionary<String, BaseRes>> ResGroup in mResGroups)
            {
                WriteHeaderFileGroup(ResGroup.Key, ResGroup.Value);
            }

            aStreamWriter.WriteLine("\t// Resource IDs" + Environment.NewLine);
            
            aStreamWriter.WriteLine("\tenum " + mFunctionPrefix + "ResourceId");
            aStreamWriter.WriteLine("\t{");
            
            // write resource Ids for all resources
            foreach (BaseRes aRes in mVariableList)
            {
                aStreamWriter.WriteLine("\t\t" + aRes.mId + "_ID,");

                foreach (String aAlias in aRes.mAlias)
                {
                    aStreamWriter.WriteLine("\t\t" + aAlias + "_ID = " + aRes.mId + "_ID,");
                }
            }
            
            aStreamWriter.WriteLine("\t\t" + mFunctionPrefix + "RESOURCE_ID_MAX");
            aStreamWriter.WriteLine("\t};" + Environment.NewLine);

            // declaration of getter functions
            aStreamWriter.WriteLine("\t// Getter functions" + Environment.NewLine);

            aStreamWriter.WriteLine("\tSexyImage* " + mFunctionPrefix + "GetImageById(int theId);");
            aStreamWriter.WriteLine("\tSexyFont* " + mFunctionPrefix + "GetFontById(int theId);");
            aStreamWriter.WriteLine("\tint " + mFunctionPrefix + "GetSoundById(int theId);");
            aStreamWriter.WriteLine("\tint " + mFunctionPrefix + "GetMusicById(int theId);");
            aStreamWriter.WriteLine("\tSexyMovie* " + mFunctionPrefix + "GetMovieById(int theId);" + Environment.NewLine);

            aStreamWriter.WriteLine("\tSexyImage*& " + mFunctionPrefix + "GetImageRefById(int theId);");
            aStreamWriter.WriteLine("\tSexyFont*& " + mFunctionPrefix + "GetFontRefById(int theId);");
            aStreamWriter.WriteLine("\tint& " + mFunctionPrefix + "GetSoundRefById(int theId);");
            aStreamWriter.WriteLine("\tint& " + mFunctionPrefix + "GetMusicRefById(int theId);");
            aStreamWriter.WriteLine("\tSexyMovie*& " + mFunctionPrefix + "GetMovieRefById(int theId);" + Environment.NewLine);

            aStreamWriter.WriteLine("\t" + mFunctionPrefix + "ResourceId " + mFunctionPrefix + "GetIdByImage(SexyImage* theImage);");
            aStreamWriter.WriteLine("\t" + mFunctionPrefix + "ResourceId " + mFunctionPrefix + "GetIdByFont(SexyFont* theFont);");
            aStreamWriter.WriteLine("\t" + mFunctionPrefix + "ResourceId " + mFunctionPrefix + "GetIdBySound(int theSound);");
            aStreamWriter.WriteLine("\t" + mFunctionPrefix + "ResourceId " + mFunctionPrefix + "GetIdByMusic(int theMusic);");
            aStreamWriter.WriteLine("\t" + mFunctionPrefix + "ResourceId " + mFunctionPrefix + "GetIdByMovie(SexyMovie* theMovie);" + Environment.NewLine);

            aStreamWriter.WriteLine("\tSexyString " + mFunctionPrefix + "GetStringIdById(int theId);");
            aStreamWriter.WriteLine("\t" + mFunctionPrefix + "ResourceId " + mFunctionPrefix + "GetIdByStringId(SexyString theStringId);" + Environment.NewLine);

            aStreamWriter.WriteLine("} // namespace Sexy" + Environment.NewLine);
            aStreamWriter.WriteLine("#endif // __" + theName.ToUpper() + "_H__");
        }

        /// <summary>
        /// Write the extract resources function for a resource group.
        /// </summary>
        /// <param name="theResGroup">Name of the resource group.</param>
        /// <param name="theResourceDict">Dictionary with the resources for this group.</param>
        private void WriteSourceFileGroup(String theResGroup, SortedDictionary<String, BaseRes> theResourceDict)
        {
            aStreamWriter.WriteLine("bool Sexy::" + mFunctionPrefix + "Extract" + theResGroup + "Resources(ResourceManager* theManager)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\tgNeedRecalcVariableToIdMap = true;" + Environment.NewLine);
            aStreamWriter.WriteLine("\tResourceManager &aMgr = *theManager;" + Environment.NewLine);
            aStreamWriter.WriteLine("\ttry");
            aStreamWriter.WriteLine("\t{");

            foreach (KeyValuePair<String, BaseRes> aBaseRes in theResourceDict)
            {
                String anId = aBaseRes.Key;
                BaseRes aRes = aBaseRes.Value;

                String aVarName = aRes.mId;
                String aMethodName = "";
                
                switch(aRes.mType)
                {
                    case ResType.Image: aMethodName = "GetImageThrow"; break;
                    case ResType.Sound: aMethodName = "GetSoundThrow"; break;
                    case ResType.Music: aMethodName = "GetMusicThrow"; break;
                    case ResType.Font:  aMethodName = "GetFontThrow"; break;
                    case ResType.Movie: aMethodName = "GetMovieThrow"; break;
                }
            
                aStreamWriter.WriteLine("\t\t" + aVarName + " = aMgr." + aMethodName + "(_S(\"" + anId + "\"));");
            }

            aStreamWriter.WriteLine("\t}");
            aStreamWriter.WriteLine("\tcatch (ResourceManagerException&)");
            aStreamWriter.WriteLine("\t{");
            aStreamWriter.WriteLine("\t\treturn false;");
            aStreamWriter.WriteLine("\t}");
            aStreamWriter.WriteLine("\treturn true;");
            aStreamWriter.WriteLine("}" + Environment.NewLine);
        }

        /// <summary>
        /// Write global variables for a resource group.
        /// </summary>
        /// <param name="theResGroup">Name of the resource group.</param>
        /// <param name="theResourceDict">Dictionary with the resources for this group.</param>
        private void WriteSourceFileVariables(String theResGroup, SortedDictionary<String, BaseRes> theResourceDict)
        {
            aStreamWriter.WriteLine("// " + theResGroup + " Resources" + Environment.NewLine);

            foreach (KeyValuePair<String, BaseRes> aBaseRes in theResourceDict)
            {
                BaseRes aRes = aBaseRes.Value;
                String aVarName = aRes.mId;
                String aTypeName = GetTypeName(aRes);

                aStreamWriter.WriteLine(aTypeName + " Sexy::" + aVarName + ";");
            }
            
            aStreamWriter.WriteLine("");
        }

        /// <summary>
        /// Write the C++ source file.
        /// </summary>
        /// <param name="theName">Name of the source file without extension.</param>
        private void WriteSourceFile(String theName)
        {
            WriteCommentHeader(theName, ".cpp");

            aStreamWriter.WriteLine("#include \"" + theName + ".h\"");
            aStreamWriter.WriteLine("#include \"ResourceManager.h\"" + Environment.NewLine);
            aStreamWriter.WriteLine("using namespace Sexy;" + Environment.NewLine);

            aStreamWriter.WriteLine("#pragma warning(disable:4311 4312)" + Environment.NewLine);
            aStreamWriter.WriteLine("static bool gNeedRecalcVariableToIdMap = false;" + Environment.NewLine);

            // ExtractResourcesByName
            aStreamWriter.WriteLine("bool Sexy::" + mFunctionPrefix + "ExtractResourcesByName(ResourceManager* theManager, SexyString theName)");
            aStreamWriter.WriteLine("{");

            foreach (KeyValuePair<String, SortedDictionary<String, BaseRes>> ResGroup in mResGroups)
            {
                aStreamWriter.WriteLine("\tif (sexystrcmp(theName.c_str(), _S(\"" + ResGroup.Key + "\")) == 0) return " + mFunctionPrefix + "Extract" + ResGroup.Key + "Resources(theManager);");
            }

            aStreamWriter.WriteLine(Environment.NewLine + "\treturn false;");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetIdByStringId
            aStreamWriter.WriteLine("Sexy::" + mFunctionPrefix + "ResourceId Sexy::" + mFunctionPrefix + "GetIdByStringId(SexyString theStringId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\ttypedef std::map<SexyString, int> MyMap;" + Environment.NewLine);
            aStreamWriter.WriteLine("\tstatic MyMap aMap;" + Environment.NewLine);
            aStreamWriter.WriteLine("\tif (aMap.empty())");
            aStreamWriter.WriteLine("\t{");
            aStreamWriter.WriteLine("\t\tfor (int i=0; i < " + mFunctionPrefix + "RESOURCE_ID_MAX; i++)");
            aStreamWriter.WriteLine("\t\t\taMap[" + mFunctionPrefix + "GetStringIdById(i)] = i;");
            aStreamWriter.WriteLine("\t}" + Environment.NewLine);
            aStreamWriter.WriteLine("\tMyMap::iterator anItr = aMap.find(theStringId);");
            aStreamWriter.WriteLine("\tif (anItr == aMap.end())");
            aStreamWriter.WriteLine("\t\treturn " + mFunctionPrefix + "RESOURCE_ID_MAX;");
            aStreamWriter.WriteLine("\telse");
            aStreamWriter.WriteLine("\t\treturn (" + mFunctionPrefix + "ResourceId) anItr->second;");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // write the global variables and the extract resource function for each group
            foreach (KeyValuePair<String, SortedDictionary<String, BaseRes>> ResGroup in mResGroups)
            {
                WriteSourceFileVariables(ResGroup.Key, ResGroup.Value);
                WriteSourceFileGroup(ResGroup.Key, ResGroup.Value);
            }

            // write global reference array
            aStreamWriter.WriteLine("static void* gResources[] =");
            aStreamWriter.WriteLine("{");

            foreach (BaseRes aRes in mVariableList)
            {
                aStreamWriter.WriteLine("\t&" + aRes.mId + ",");
            }

            aStreamWriter.WriteLine("\tNULL");
            aStreamWriter.WriteLine("};" + Environment.NewLine);

            // LoadImageById
            aStreamWriter.WriteLine("SexyImage* Sexy::" + mFunctionPrefix + "LoadImageById(ResourceManager* theManager, int theId)" + Environment.NewLine + "{");
            aStreamWriter.WriteLine("\treturn (*((SexyImage**)gResources[theId]) = theManager->LoadImage(" + mFunctionPrefix + "GetStringIdById(theId)));" + Environment.NewLine + "}" + Environment.NewLine);

            // ReplaceImageById
            aStreamWriter.WriteLine("void Sexy::" + mFunctionPrefix + "ReplaceImageById(ResourceManager* theManager, int theId, SexyImage* theImage)" + Environment.NewLine + "{");
            aStreamWriter.WriteLine("\ttheManager->ReplaceImage(" + mFunctionPrefix + "GetStringIdById(theId), theImage);");
            aStreamWriter.WriteLine("\t*(SexyImage**)gResources[theId] = theImage;" + Environment.NewLine + "}" + Environment.NewLine);

            // GetImageById
            aStreamWriter.WriteLine("SexyImage* Sexy::" + mFunctionPrefix + "GetImageById(int theId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn *(SexyImage**)gResources[theId];");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetFontById
            aStreamWriter.WriteLine("SexyFont* Sexy::" + mFunctionPrefix + "GetFontById(int theId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn *(SexyFont**)gResources[theId];");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetSoundById
            aStreamWriter.WriteLine("int Sexy::" + mFunctionPrefix + "GetSoundById(int theId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn *(int*)gResources[theId];");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetMusicById
            aStreamWriter.WriteLine("int Sexy::" + mFunctionPrefix + "GetMusicById(int theId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn *(int*)gResources[theId];");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetMovieById
            aStreamWriter.WriteLine("SexyMovie* Sexy::" + mFunctionPrefix + "GetMovieById(int theId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn *(SexyMovie**)gResources[theId];");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetImageRefById
            aStreamWriter.WriteLine("SexyImage*& Sexy::"+ mFunctionPrefix + "GetImageRefById(int theId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn *(SexyImage**)gResources[theId];");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetFontRefById
            aStreamWriter.WriteLine("SexyFont*& Sexy::" + mFunctionPrefix + "GetFontRefById(int theId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn *(SexyFont**)gResources[theId];");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetSoundRefById
            aStreamWriter.WriteLine("int& Sexy::" + mFunctionPrefix + "GetSoundRefById(int theId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn *(int*)gResources[theId];");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetMusicRefById
            aStreamWriter.WriteLine("int& Sexy::" + mFunctionPrefix + "GetMusicRefById(int theId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn *(int*)gResources[theId];");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetMovieRefById
            aStreamWriter.WriteLine("SexyMovie*& Sexy::" + mFunctionPrefix + "GetMovieRefById(int theId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn *(SexyMovie**)gResources[theId];");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetIdByVariable
            aStreamWriter.WriteLine("static Sexy::" + mFunctionPrefix + "ResourceId " + mFunctionPrefix + "GetIdByVariable(const void* theVariable)" + Environment.NewLine + "{");
            aStreamWriter.WriteLine("\ttypedef std::map<int, int> MyMap;" + Environment.NewLine);
            aStreamWriter.WriteLine("\tstatic MyMap aMap;" + Environment.NewLine);
            aStreamWriter.WriteLine("\tif (gNeedRecalcVariableToIdMap)" + Environment.NewLine + "\t{");
            aStreamWriter.WriteLine("\t\tgNeedRecalcVariableToIdMap = false;");
            aStreamWriter.WriteLine("\t\taMap.clear();");
            aStreamWriter.WriteLine("\t\tfor (int i=0; i < " + mFunctionPrefix + "RESOURCE_ID_MAX; i++)");
            aStreamWriter.WriteLine("\t\t\taMap[*(int*)gResources[i]] = i;" + Environment.NewLine + "\t}" + Environment.NewLine);
            aStreamWriter.WriteLine("\tMyMap::iterator anItr = aMap.find((int)theVariable);");
            aStreamWriter.WriteLine("\tif (anItr == aMap.end())");
            aStreamWriter.WriteLine("\t\treturn " + mFunctionPrefix + "RESOURCE_ID_MAX;");
            aStreamWriter.WriteLine("\telse");
            aStreamWriter.WriteLine("\t\treturn (" + mFunctionPrefix + "ResourceId)anItr->second;");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetIdByImage
            aStreamWriter.WriteLine("Sexy::" + mFunctionPrefix + "ResourceId Sexy::" + mFunctionPrefix + "GetIdByImage(SexyImage* theImage)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn " + mFunctionPrefix + "GetIdByVariable(theImage);");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetIdByFont
            aStreamWriter.WriteLine("Sexy::" + mFunctionPrefix + "ResourceId Sexy::" + mFunctionPrefix + "GetIdByFont(SexyFont* theFont)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn " + mFunctionPrefix + "GetIdByVariable(theFont);");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetIdBySound
            aStreamWriter.WriteLine("Sexy::" + mFunctionPrefix + "ResourceId Sexy::" + mFunctionPrefix + "GetIdBySound(int theSound)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn " + mFunctionPrefix + "GetIdByVariable((void*)theSound);");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetIdByMusic
            aStreamWriter.WriteLine("Sexy::" + mFunctionPrefix + "ResourceId Sexy::" + mFunctionPrefix + "GetIdByMusic(int theMusic)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn " + mFunctionPrefix + "GetIdByVariable((void*)theMusic);");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetIdByMovie
            aStreamWriter.WriteLine("Sexy::" + mFunctionPrefix + "ResourceId Sexy::" + mFunctionPrefix + "GetIdByMovie(SexyMovie* theMovie)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\treturn " + mFunctionPrefix + "GetIdByVariable(theMovie);");
            aStreamWriter.WriteLine("}" + Environment.NewLine);

            // GetStringIdById
            aStreamWriter.WriteLine("SexyString Sexy::" + mFunctionPrefix + "GetStringIdById(int theId)");
            aStreamWriter.WriteLine("{");
            aStreamWriter.WriteLine("\tswitch (theId)");
            aStreamWriter.WriteLine("\t{");
            
            foreach (BaseRes aRes in mVariableList)
            {
                aStreamWriter.WriteLine("\t\tcase " + aRes.mId + "_ID: return _S(\"" + aRes.mId + "\");");
            }

            aStreamWriter.WriteLine("\t\tdefault: return _S(\"\");");
            aStreamWriter.WriteLine("\t}");
            aStreamWriter.WriteLine("}" + Environment.NewLine);
        }

        
        /// <summary>
        /// Write the C++ source code based on the parsed resource information.
        /// </summary>
        /// <param name="theOutDir">Directory to write the C++ files (current dir, if emtpy).</param>
        /// <param name="theOutFileName">Name of the C++ files without extension.</param>
        /// <param name="theFunctionPrefix">A optional function prefix.</param>
        /// <returns>False in case of any error, otherwise true.</returns>
        public bool WriteSourceCode(String theOutDir, String theOutFileName, String theFunctionPrefix)
        {
            mFunctionPrefix = theFunctionPrefix;

            if (theOutDir == "")
            {
                mErrorString = "Please specify Output Directory!";
                return false;
            }

            if (theOutFileName == "")
            {
                mErrorString = "Please specify Output File Name!";
                return false;
            }

            try
            {
                //////////////////////////////////////////////////////////////////////////
                // create path and file names
                //////////////////////////////////////////////////////////////////////////
                theOutDir = Common.AddTrailingSlash(theOutDir);
                theOutDir = Common.GetStandardFileName(theOutDir);

                String aHeaderName = theOutDir + theOutFileName + ".h";
                String aSourceName = theOutDir + theOutFileName + ".cpp";

                // open stream for header file
                try
                {
                    aStreamWriter = new StreamWriter(aHeaderName);
                }
                catch (ArgumentException aException)
                {
                    mErrorString = "Unable to open stream: " + aHeaderName + " " + aException.Message;

                    return false;
                }

                mOutputForm.WriteLine("Writing header file: " + aHeaderName );
                Application.DoEvents();

                // write header file
                WriteHeaderFile(theOutFileName);

                aStreamWriter.Close();
                aStreamWriter.Dispose();

                // open stream for source file
                try
                {
                    aStreamWriter = new StreamWriter(aSourceName);
                }
                catch (ArgumentException aException)
                {
                    mErrorString = "Unable to open stream: " + aSourceName + " " + aException.Message;

                    return false;
                }

                mOutputForm.WriteLine("Writing source file: " + aSourceName);
                Application.DoEvents();

                // write source file
                WriteSourceFile(theOutFileName);

                aStreamWriter.Close();
                aStreamWriter.Dispose();
            }
            catch (Exception aException)
            {
                mErrorString += aException.Message;

                return false;
            }

            return true;
        }
    }
}
